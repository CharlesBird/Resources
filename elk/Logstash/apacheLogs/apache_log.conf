input {
#    http {
#        port => 7474
#    }

#    stdin{}

    file {
        path => "D:/BaiduNetdiskDownload/elastic/logstash/demo_data/apache_logs/apache_logs"
        start_position => "beginning"
    }
}

filter {
#    mutate {
#        add_field => { "[@metadata][debug]" => true }
#    }

    grok {
        match => {
            "message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:[@metadata][timestamp]}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}'
#            "message" => "%{COMBINEDAPACHELOG}"
        }
    }

    mutate {
        copy => { "@timestamp" => "@read_timestamp" }
    }

    date {
        # 17/May/2015:10:05:50 +0000
        match => ["[@metadata][timestamp]", "dd/MMM/yyyy:HH:mm:ss Z"]
    }

    mutate {
        convert => { "bytes" => "integer" }
    }

    geoip {
        source => "clientip"
        fields => ["location", "country_name", "city_name", "region_name"]
    }

    useragent {
        source => "agent"
        target => "useragent"
    }

    mutate {
        remove_field => ["headers"]
    }

    mutate {
        add_field => {
            "[@metadata][index]" => "apache_logs_%{+YYYY.MM}"
        }
    }

    if "_grokparsefailure" in [tags] {
        mutate {
            replace => {
                "[@metadata][index]" => "apache_logs_failure_%{+YYYY.MM}"
            }
        }
    } else {
        mutate {
            remove_field => ["message"]
        }
    }
}

output {
    if [@metadata][debug] {
        stdout {
            codec => rubydebug{metadata => true}
        }
    } else {
        stdout {codec => dots}

        elasticsearch{
            hosts => ["118.190.149.30:9200"]
            index => "%{[@metadata][index]}"
#            document_type => "_doc"
        }
    }
}