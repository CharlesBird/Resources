input {
    http {
        port => 7474
    }
}

filter {
#    grok {
#        match => {
#            "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:-|%{NUMBER:bytes:int}) %{QS:referrer} %{QS:agent}"
#        }
#    }

#    grok {
#        match => {
#            "message" => "(?<service_name>[a-z0-9]{10,11})"
#        }
#    }

#    grok {
#        match => {
#            "message" => "%{SERVICE:service}"
#        }
#        pattern_definitions => {
#            "SERVICE" => "[a-z0-9]{10,11}"
#        }
#    }

#    grok {
#        match => {
#            "message" => "%{SERVICE:service_name} %{NUMBER:message}"
#        }
#        overwrite => ["message"]
#        pattern_definitions => {
#            "SERVICE" => "[a-z0-9]{10,11}"
#        }
#    }

#    dissect {
#        mapping => {
#            "message" => "%{ts} %{+ts} %{+ts} %{src} %{prog}[%{pid}]: %{msg}"
#        }
#    }

#    dissect {
#        mapping => {
#            "message" => "%{a}-%{b}-%{c}"
#        }
#    }

#     dissect {
#        mapping => {
#            "message" => "%{+order/2} %{+order/3} %{+order/4} %{+order/1}"
#        }
#    }

#    dissect {
#        mapping => {
#            "message" => "%{?key1}=%{&key1}&%{?key2}=%{&key2}"
#        }
#    }

#    dissect {
#        mapping => {
#            "message" => "%{name},%{addr1},%{addr2},%{addr3},%{city},%{zip}"
#        }
#        convert_datatype => {"zip" => "int"}
#    }

#    mutate {convert => {"message" => "integer"}}
#    mutate {gsub => ["message", "/", "-"]}
#    mutate {split => {"message" => "-"}}
#    mutate {join => {"message" => ","}}

#    mutate {merge => {"b" => "a"}}
#    mutate {rename => {"b" => "d"}}

#    mutate {update => {"a" => "source from c:%{c}"}}
#    mutate {replace => {"e" => "source from b:%{b}"}}

#    json {
#        source => "message"
#        target => "msg_json"
#    }

#    geoip {
#        source => "message"
#    }

    ruby {
        code => 'size = event.get("message").size;
                 event.set("message_size", size)'
    }

    mutate {
        remove_field => "headers"
    }
}

output {
    stdout {
        codec => rubydebug
    }
}